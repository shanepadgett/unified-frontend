/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as EnvironmentsImport } from './routes/environments'
import { Route as IndexImport } from './routes/index'
import { Route as FeatureFlagsIndexImport } from './routes/feature-flags/index'
import { Route as FeatureFlagsCreateImport } from './routes/feature-flags/create'
import { Route as FeatureFlagsIdImport } from './routes/feature-flags/$id'

// Create/Update Routes

const EnvironmentsRoute = EnvironmentsImport.update({
  id: '/environments',
  path: '/environments',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const FeatureFlagsIndexRoute = FeatureFlagsIndexImport.update({
  id: '/feature-flags/',
  path: '/feature-flags/',
  getParentRoute: () => rootRoute,
} as any)

const FeatureFlagsCreateRoute = FeatureFlagsCreateImport.update({
  id: '/feature-flags/create',
  path: '/feature-flags/create',
  getParentRoute: () => rootRoute,
} as any)

const FeatureFlagsIdRoute = FeatureFlagsIdImport.update({
  id: '/feature-flags/$id',
  path: '/feature-flags/$id',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/environments': {
      id: '/environments'
      path: '/environments'
      fullPath: '/environments'
      preLoaderRoute: typeof EnvironmentsImport
      parentRoute: typeof rootRoute
    }
    '/feature-flags/$id': {
      id: '/feature-flags/$id'
      path: '/feature-flags/$id'
      fullPath: '/feature-flags/$id'
      preLoaderRoute: typeof FeatureFlagsIdImport
      parentRoute: typeof rootRoute
    }
    '/feature-flags/create': {
      id: '/feature-flags/create'
      path: '/feature-flags/create'
      fullPath: '/feature-flags/create'
      preLoaderRoute: typeof FeatureFlagsCreateImport
      parentRoute: typeof rootRoute
    }
    '/feature-flags/': {
      id: '/feature-flags/'
      path: '/feature-flags'
      fullPath: '/feature-flags'
      preLoaderRoute: typeof FeatureFlagsIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/environments': typeof EnvironmentsRoute
  '/feature-flags/$id': typeof FeatureFlagsIdRoute
  '/feature-flags/create': typeof FeatureFlagsCreateRoute
  '/feature-flags': typeof FeatureFlagsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/environments': typeof EnvironmentsRoute
  '/feature-flags/$id': typeof FeatureFlagsIdRoute
  '/feature-flags/create': typeof FeatureFlagsCreateRoute
  '/feature-flags': typeof FeatureFlagsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/environments': typeof EnvironmentsRoute
  '/feature-flags/$id': typeof FeatureFlagsIdRoute
  '/feature-flags/create': typeof FeatureFlagsCreateRoute
  '/feature-flags/': typeof FeatureFlagsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/environments'
    | '/feature-flags/$id'
    | '/feature-flags/create'
    | '/feature-flags'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/environments'
    | '/feature-flags/$id'
    | '/feature-flags/create'
    | '/feature-flags'
  id:
    | '__root__'
    | '/'
    | '/environments'
    | '/feature-flags/$id'
    | '/feature-flags/create'
    | '/feature-flags/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  EnvironmentsRoute: typeof EnvironmentsRoute
  FeatureFlagsIdRoute: typeof FeatureFlagsIdRoute
  FeatureFlagsCreateRoute: typeof FeatureFlagsCreateRoute
  FeatureFlagsIndexRoute: typeof FeatureFlagsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  EnvironmentsRoute: EnvironmentsRoute,
  FeatureFlagsIdRoute: FeatureFlagsIdRoute,
  FeatureFlagsCreateRoute: FeatureFlagsCreateRoute,
  FeatureFlagsIndexRoute: FeatureFlagsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/environments",
        "/feature-flags/$id",
        "/feature-flags/create",
        "/feature-flags/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/environments": {
      "filePath": "environments.tsx"
    },
    "/feature-flags/$id": {
      "filePath": "feature-flags/$id.tsx"
    },
    "/feature-flags/create": {
      "filePath": "feature-flags/create.tsx"
    },
    "/feature-flags/": {
      "filePath": "feature-flags/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
